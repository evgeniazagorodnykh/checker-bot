import aiohttp
from sqlalchemy import select
from aiogram import Bot
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
from aiogram import types

from bot.config import APP_URL
from src.models import User
from src.database import async_session_maker


async def get_user_token(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID"""
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{APP_URL}auth/token/telegram?telegram_id={user_id}"
        ) as response:
            if response.status == 200:
                data = await response.json()
                return data.get("access_token")
            else:
                return None


async def get_start(message: Message, bot: Bot):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n'
        '–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n'
        '–í–≤–µ–¥–∏—Ç–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n',
        parse_mode='HTML'
    )


async def check_imei(message: types.Message):
    token = await get_user_token(message.from_user.id)
    if not token:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    print(token)

    imei = message.text.strip()
    if len(imei) != 15 or not imei.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IMEI. –í–≤–µ–¥–∏—Ç–µ 15-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    async with aiohttp.ClientSession() as session:
        print("Authorization", f"Bearer {token}")
        async with session.post(
            f"{APP_URL}api/check-imei?imei={imei}", 
            headers={
            "Authorization": f"Bearer {token}"
            },
        ) as resp:
            if resp.status == 200:
                data = await resp.json()

                imei_status = data.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                device_name = data.get("deviceName", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                country = data.get("purchaseCountry", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                fmi_on = "–í–∫–ª—é—á–µ–Ω" if data.get("fmiOn") else "–í—ã–∫–ª—é—á–µ–Ω"
                lost_mode = "–î–∞" if data.get("lostMode") else "–ù–µ—Ç"
                
                response_text = (
                    f"üì± *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:*\n"
                    f"üîπ *IMEI:* `{imei}`\n"
                    f"üîπ *–°—Ç–∞—Ç—É—Å:* `{imei_status}`\n"
                    f"üîπ *–ú–æ–¥–µ–ª—å:* `{device_name}`\n"
                    f"üîπ *–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏:* `{country}`\n"
                    f"üîπ *Find My iPhone:* `{fmi_on}`\n"
                    f"üîπ *–†–µ–∂–∏–º —É—Ç–µ—Ä–∏:* `{lost_mode}`"
                )
                
                await message.answer(response_text, parse_mode=ParseMode.MARKDOWN)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
